// Code generated by MockGen. DO NOT EDIT.
// Source: management/focuscatalog/focus_catalog_item_repository.go
//
// Generated by this command:
//
//	mockgen -source=management/focuscatalog/focus_catalog_item_repository.go -destination=management/mocks/focus_catalog_item_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/juanmabm/focusio-core/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFocusCatalogItemRepository is a mock of FocusCatalogItemRepository interface.
type MockFocusCatalogItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFocusCatalogItemRepositoryMockRecorder
	isgomock struct{}
}

// MockFocusCatalogItemRepositoryMockRecorder is the mock recorder for MockFocusCatalogItemRepository.
type MockFocusCatalogItemRepositoryMockRecorder struct {
	mock *MockFocusCatalogItemRepository
}

// NewMockFocusCatalogItemRepository creates a new mock instance.
func NewMockFocusCatalogItemRepository(ctrl *gomock.Controller) *MockFocusCatalogItemRepository {
	mock := &MockFocusCatalogItemRepository{ctrl: ctrl}
	mock.recorder = &MockFocusCatalogItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFocusCatalogItemRepository) EXPECT() *MockFocusCatalogItemRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFocusCatalogItemRepository) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFocusCatalogItemRepositoryMockRecorder) Delete(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFocusCatalogItemRepository)(nil).Delete), name)
}

// FindAll mocks base method.
func (m *MockFocusCatalogItemRepository) FindAll() []entity.FocusCatalogItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.FocusCatalogItem)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFocusCatalogItemRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFocusCatalogItemRepository)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockFocusCatalogItemRepository) FindByName(name string) (entity.FocusCatalogItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(entity.FocusCatalogItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockFocusCatalogItemRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockFocusCatalogItemRepository)(nil).FindByName), name)
}

// Insert mocks base method.
func (m *MockFocusCatalogItemRepository) Insert(catalog entity.FocusCatalogItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", catalog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFocusCatalogItemRepositoryMockRecorder) Insert(catalog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFocusCatalogItemRepository)(nil).Insert), catalog)
}

// Update mocks base method.
func (m *MockFocusCatalogItemRepository) Update(name string, catalog entity.FocusCatalogItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", name, catalog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFocusCatalogItemRepositoryMockRecorder) Update(name, catalog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFocusCatalogItemRepository)(nil).Update), name, catalog)
}
