// Code generated by MockGen. DO NOT EDIT.
// Source: management/focusapp/focus_app_repository.go
//
// Generated by this command:
//
//	mockgen -source=management/focusapp/focus_app_repository.go -destination=management/mocks/focus_app_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/juanmabm/focusio-core/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFocusAppRepository is a mock of FocusAppRepository interface.
type MockFocusAppRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFocusAppRepositoryMockRecorder
	isgomock struct{}
}

// MockFocusAppRepositoryMockRecorder is the mock recorder for MockFocusAppRepository.
type MockFocusAppRepositoryMockRecorder struct {
	mock *MockFocusAppRepository
}

// NewMockFocusAppRepository creates a new mock instance.
func NewMockFocusAppRepository(ctrl *gomock.Controller) *MockFocusAppRepository {
	mock := &MockFocusAppRepository{ctrl: ctrl}
	mock.recorder = &MockFocusAppRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFocusAppRepository) EXPECT() *MockFocusAppRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFocusAppRepository) Delete(n string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", n)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFocusAppRepositoryMockRecorder) Delete(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFocusAppRepository)(nil).Delete), n)
}

// FindAll mocks base method.
func (m *MockFocusAppRepository) FindAll() []entity.FocusApp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.FocusApp)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFocusAppRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFocusAppRepository)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockFocusAppRepository) FindByName(n string) (entity.FocusApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", n)
	ret0, _ := ret[0].(entity.FocusApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockFocusAppRepositoryMockRecorder) FindByName(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockFocusAppRepository)(nil).FindByName), n)
}

// Insert mocks base method.
func (m *MockFocusAppRepository) Insert(fa entity.FocusApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", fa)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFocusAppRepositoryMockRecorder) Insert(fa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFocusAppRepository)(nil).Insert), fa)
}

// Update mocks base method.
func (m *MockFocusAppRepository) Update(n string, fa *entity.FocusApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", n, fa)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFocusAppRepositoryMockRecorder) Update(n, fa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFocusAppRepository)(nil).Update), n, fa)
}
